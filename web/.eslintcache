[{"C:\\dev\\python\\dbmonitor\\web\\src\\App.js":"1","C:\\dev\\python\\dbmonitor\\web\\src\\reportWebVitals.js":"2","C:\\dev\\python\\dbmonitor\\web\\src\\index.js":"3","C:\\dev\\python\\dbmonitor\\web\\src\\Monitor.js":"4"},{"size":596,"mtime":1609551874521,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1609507507481,"results":"7","hashOfConfig":"6"},{"size":613,"mtime":1609554892434,"results":"8","hashOfConfig":"6"},{"size":2894,"mtime":1609554649443,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"k8mjel",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\dev\\python\\dbmonitor\\web\\src\\App.js",["19"],"C:\\dev\\python\\dbmonitor\\web\\src\\reportWebVitals.js",[],"C:\\dev\\python\\dbmonitor\\web\\src\\index.js",[],"C:\\dev\\python\\dbmonitor\\web\\src\\Monitor.js",["20","21"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst Monitor = () => {\r\n    const [db, setDb] = useState({});\r\n\r\n    useEffect(async () => {\r\n        const request = await fetch('http://127.0.0.1:5000/api/monitor');\r\n        const result = await request.json();\r\n        setDb(result);\r\n        console.log(result);\r\n        // return () => {\r\n        //     cleanup\r\n        // }\r\n    }, [])\r\n    return (\r\n        <main role=\"main\" className=\"container\">\r\n            <div className=\"\">\r\n                <h1> Database Metrics</h1>\r\n                <form className=\"form-inline mt-2 mt-md-0\">\r\n                    {/* <label className=\"pr-2\">Select Period: </label> */}\r\n                    {/* <select disabled>\r\n                        <option>Today</option> */}\r\n                    {/* <option>This Week</option>\r\n              <option>This Month</option> */}\r\n                    {/* </select> */}\r\n                    <label className=\"pl-2 font-weight-bold\">Today: &nbsp;{new Date().toUTCString().substring(0, 25)}</label>\r\n                    <hr className=\"py-4\" />\r\n                    <table className=\"table text-left \">\r\n                        <caption className=\"text-right font-weight-bold text-secondary\">Download database metrics in excel format :\r\n                        <a className=\"text-primary\" href=\"#\">\r\n                                <i class=\"bi bi-download px-1\"></i>\r\n                                database.xls\r\n                        </a></caption>\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">#</th>\r\n                                <th scope=\"col\">Database Name</th>\r\n                                <th scope=\"col\">Size Yestarday (mb)</th>\r\n                                <th scope=\"col\">Current Size (mb)</th>\r\n                                <th scope=\"col\">Daily Growth Rate (%)</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                db.data && db.data.length > 0 && db.data.map((item, index) =>\r\n                                    <tr key={item.id}>\r\n                                        <th scope=\"row\">{index + 1} {console.log(item)}</th>\r\n                                        <td className=\"text-uppercase font-weight-bold\">{item.db_name}</td>\r\n                                        <td>{item.size} </td>\r\n                                        <td>{item.size || '--'}</td>\r\n                                        <td>{((item.size - item.size) / item.size) * 100}</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Monitor;",{"ruleId":"22","severity":1,"message":"23","line":8,"column":9,"nodeType":"24","endLine":8,"endColumn":56},{"ruleId":"25","severity":1,"message":"26","line":6,"column":15,"nodeType":"27","endLine":14,"endColumn":6},{"ruleId":"22","severity":1,"message":"23","line":30,"column":25,"nodeType":"24","endLine":30,"endColumn":62},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression"]